The first step of this challenge is a Merkle-Hellman knapscak problem.

n represents the random value used for creating the public key from the private key.
m represents the modulus greater than the summation of the values within the private key


first, we find the multiplicative inverse of n mod m
	there are a variety of ways to do this.
	n_inverse ends up being 629
	
second, we verify that this is the correct value by multiplying n by n_inverse and taking the mod of this value. The result should be 1.

third, we start decrypting our given ciphertext with an equation similar to the following:
	Let c represent the ciphertext and c_i represent the i-th value of the ciphertext and let n_inverse represent the mulitplicative inverse of the random value n mod m.
	
	for all c_i in c:
		multiply n_inv by c_i mod m to get an integer value p_int, where p_int is the decrypted value in intereger form
		convert p_int into its binary equivalent using the following (messy) equation: 

			def int_to_binary(integer):
				binary = ''
				total = integer
				index = len(priv) - 1
				while index >= 0:
					if total >= priv[index]:
						binary = '1' + binary
						total = total - priv[index]
					else:
						binary = '0' + binary
					index -= 1
					return binary
					
	the total decrypted message, p, should be the concatenation of all of these binary strings
				
	
knowing that ascii values lie within the range of 0 - 127 which can be represented with 8 bits, we take all of the decrypted bit within p and splits them into groups of 8 and then convert all of the groups into their ascii equivalent
	
We notice that the resulting character equivalent appear to be encrypted.
At first glance, it appears to be a subsititution cipher, and after running frequency analysis on the given text we are able to determine the substitutions that are being made and turn it into a cleartext message. 

Parsing through the message we find the following message:
THE FLAG IS L4Y3RSUP0NLAYER5H0P3Y0UENJ0ID1T
wrapping this with the standard flag format, we get auctf{L4Y3RSUP0NLAYER5H0P3Y0UENJ0ID1T}